#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mlogtail HTTP API –Ω–∞ Python
"""

import requests
import json
import time
from typing import Dict, Any


class MlogtailClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å mlogtail HTTP API"""
    
    def __init__(self, base_url: str = "http://localhost:37412"):
        self.base_url = base_url.rstrip('/')
    
    def health(self) -> Dict[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        response = requests.get(f"{self.base_url}/health")
        response.raise_for_status()
        return response.json()
    
    def stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
        response = requests.get(f"{self.base_url}/stats")
        response.raise_for_status()
        return response.json()
    
    def counter(self, name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞"""
        response = requests.get(f"{self.base_url}/counter/{name}")
        response.raise_for_status()
        data = response.json()
        return data['value']
    
    def reset(self) -> Dict[str, str]:
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        response = requests.post(f"{self.base_url}/reset")
        response.raise_for_status()
        return response.json()
    
    def stats_reset(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        response = requests.post(f"{self.base_url}/stats_reset")
        response.raise_for_status()
        return response.json()


def print_stats(stats: Dict[str, int]):
    """–ö—Ä–∞—Å–∏–≤–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("\n" + "="*50)
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Postfix")
    print("="*50)
    
    print(f"\nüì® –ü–∏—Å—å–º–∞:")
    print(f"  –ü–æ–ª—É—á–µ–Ω–æ:      {stats['received']:>10,}")
    print(f"  –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:    {stats['delivered']:>10,}")
    print(f"  –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª.:  {stats['forwarded']:>10,}")
    print(f"  –û—Ç–ª–æ–∂–µ–Ω–æ:      {stats['deferred']:>10,}")
    print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ:     {stats['bounced']:>10,}")
    print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats['rejected']:>10,}")
    print(f"  –ó–∞–¥–µ—Ä–∂–∞–Ω–æ:     {stats['held']:>10,}")
    print(f"  –£–¥–∞–ª–µ–Ω–æ:       {stats['discarded']:>10,}")
    
    print(f"\nüíæ –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö:")
    bytes_received_mb = stats['bytes_received'] / (1024 * 1024)
    bytes_delivered_mb = stats['bytes_delivered'] / (1024 * 1024)
    print(f"  –ü–æ–ª—É—á–µ–Ω–æ:   {bytes_received_mb:>10,.2f} MB")
    print(f"  –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {bytes_delivered_mb:>10,.2f} MB")
    
    if stats['received'] > 0:
        delivery_rate = (stats['delivered'] / stats['received']) * 100
        rejection_rate = (stats['rejected'] / stats['received']) * 100
        print(f"\nüìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_rate:>6.2f}%")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω: {rejection_rate:>6.2f}%")
    
    print("="*50 + "\n")


def monitor_continuous(client: MlogtailClient, interval: int = 5):
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥"""
    print(f"–ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫)...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        while True:
            try:
                stats = client.stats()
                print(f"\r[{time.strftime('%H:%M:%S')}] "
                      f"–ü–æ–ª—É—á–µ–Ω–æ: {stats['received']:>6} | "
                      f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['delivered']:>6} | "
                      f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']:>6}",
                      end='', flush=True)
                time.sleep(interval)
            except requests.RequestException as e:
                print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                time.sleep(interval)
    except KeyboardInterrupt:
        print("\n\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    client = MlogtailClient("http://localhost:37412")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    try:
        health = client.health()
        print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–µ—Ä—Å–∏—è: {health['version']})\n")
    except requests.RequestException as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {e}")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = client.stats()
    print_stats(stats)
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    print("–ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤:")
    print(f"  –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å–µ–º: {client.counter('received')}")
    print(f"  –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {client.counter('delivered')}")
    print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–∏—Å–µ–º: {client.counter('rejected')}")
    print()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    # monitor_continuous(client, interval=5)


if __name__ == "__main__":
    main()
